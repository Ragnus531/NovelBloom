@page "/novel/add-or-update/{SetHashCode:int?}"

@using NovelBloom.Components.Dialogs
@using NovelBloom.Models
@using NovelBloom.Styles
@using NovelBloom.Utils

<style>
    .mud-input-label {
        color: #788394 !important;
    }
</style>        

@if(Novel != null)
{
    @if(IsEditing)
    {
        <MudText Typo="Typo.h4" >Editing novel</MudText>
    }
    else
    {
        <MudText Typo="Typo.h4">Creating novel</MudText>
    }

    @foreach (var section in Novel.NovelSection)
    {
        <MudCard Style="@($"background:{_themeDefinition.PaletteLight.Primary}; position: relative")" Class="pa-2 ma-3 rounded-lg">
            <MudCardContent>
                <MudTextField @bind-Value="section.SectionName" Color="Color.Tertiary" Typo="Typo.h6" Class="mb-2" Label="Write your section here..."></MudTextField>
                <MudTextField Style="@($"background:#313639; color:#A3AAB4")" @bind-Value="section.SectionText" Label="Add content for this part here..." Variant="Variant.Filled" FullWidth="true" Lines="4" />

                <MudFab Color="Color.Error" StartIcon="@Icons.Material.Filled.Close"
                        Size="Size.Small"
                        Style="position: absolute; top: 5px; right: 5px;"
                        OnClick="() => RemoveSection(section)" />

            </MudCardContent>
        </MudCard>
    }


    @* <MudFab Style="position: fixed; bottom: 16px; right: 16px;" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" OnClick="() => AddSection()" /> *@
    <div Style="display: flex; justify-content: flex-end;">
        <MudFab Class="mr-2" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" OnClick="() => AddSection()" />
        <MudFab Class="mr-2" Color="Color.Success" StartIcon="@Icons.Material.Filled.Save" OnClick="() => AddSection()" />
    </div>
}
else
{
    <p>Loading...</p>
}




@code {
    // 1. Private Fields
    private MudTheme _themeDefinition = new MainTheme();

    // 2. Properties
    public string TextValue { get; set; }
    protected bool IsEditing { get; set; }
    private Novel Novel { get; set; } = new Novel();

    // Injected Services

    [Inject] private IDialogService DialogService { get; set; } = default!;
    [Inject] private StateContainer StateContainer { get; set; } = default!;
    [Parameter] public int? SetHashCode { get; set; }

    protected override void OnInitialized()
    {
        if(SetHashCode.HasValue)
        {
            var data = (Novel)StateContainer.ObjectTunnel[SetHashCode.Value];
            Novel = data;
            IsEditing = true;
        }
        else
        {
            Novel.NovelSection.Add(new NovelSection()
                {
                    SectionName = "Prologue",
                    SectionText = "Once upon a ime..."
                });
            IsEditing = false;
        }
    }

    public void AddSection()
    {
        Novel.NovelSection.Add(new NovelSection());
    }

    public async Task RemoveSection(NovelSection novelSection)
    {
        var sectionName = string.IsNullOrEmpty(novelSection.SectionName) ? "this section" :  novelSection.SectionName;

        var parameters = new DialogParameters<SimpleDialog>
        {
            { x => x.ContentText, $"Are you sure you want to remove {sectionName}?" },
            { x => x.ButtonText, "Yes" },
            { x => x.Color, Color.Error }
        };

        var dialog = await DialogService.ShowAsync<SimpleDialog>("Confirm", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Novel.NovelSection.Remove(novelSection);

        }
    }
}
